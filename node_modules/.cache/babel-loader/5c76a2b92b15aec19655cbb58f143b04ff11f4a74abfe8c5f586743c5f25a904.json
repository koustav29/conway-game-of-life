{"ast":null,"code":"var _jsxFileName = \"/home/milton/Desktop/Projects/game-of-life/src/App.js\",\n  _s = $RefreshSig$();\nimport logo from './logo.svg';\nimport './App.css';\nimport { useState } from 'react';\nimport { produce } from 'immer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst numRows = 10;\nconst numCols = 10;\nfunction App() {\n  _s();\n  const [grid, setGrid] = useState(() => {\n    const rows = [];\n    for (let i = 0; i < numRows; i++) {\n      rows.push(Array.from(Array(numCols), () => 0));\n    }\n    return rows;\n  });\n  console.log(grid);\n  const [running, setRunning] = useState(false);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"start\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'grid',\n        gridTemplateColumns: `repeat(${numCols},20px)`\n      },\n      children: grid.map((rows, i) => rows.map((cols, j) => /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => {\n          const newGrid = produce(grid, gridCopy => {\n            gridCopy[i][j] = grid[i][j] ? 0 : 1;\n          });\n          setGrid(newGrid);\n        },\n        style: {\n          width: 20,\n          height: 20,\n          backgroundColor: grid[i][j] ? \"orange\" : undefined,\n          border: \"solid 1px black\",\n          borderRadius: '2px'\n        }\n      }, `${i}-${j}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 11\n      }, this)))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"+Khdnm5sCIdKW3aDptetAbNfRkw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["logo","useState","produce","jsxDEV","_jsxDEV","Fragment","_Fragment","numRows","numCols","App","_s","grid","setGrid","rows","i","push","Array","from","console","log","running","setRunning","children","fileName","_jsxFileName","lineNumber","columnNumber","style","display","gridTemplateColumns","map","cols","j","onClick","newGrid","gridCopy","width","height","backgroundColor","undefined","border","borderRadius","_c","$RefreshReg$"],"sources":["/home/milton/Desktop/Projects/game-of-life/src/App.js"],"sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport { useState } from 'react';\nimport { produce } from 'immer';\n\nconst numRows = 10;\nconst numCols = 10;\nfunction App() {\n  const [grid,setGrid] = useState(()=>{\n    const rows = [];\n    for(let i=0;i<numRows;i++){\n      rows.push(Array.from(Array(numCols),()=>0));\n    }\n    return rows;\n  });\n  console.log(grid);\n  const [running,setRunning] = useState(false);\n  return (\n    <>\n    <button>start</button>\n    <div style={{\n      display:'grid',\n      gridTemplateColumns:`repeat(${numCols},20px)`\n    }}>\n      {grid.map((rows,i) => \n        rows.map((cols,j)=>(\n          <div\n          onClick={()=>{\n            const newGrid = produce(grid, gridCopy =>{\n              gridCopy[i][j] = grid[i][j]?0:1;\n            });\n            setGrid(newGrid);\n          }}\n          key={`${i}-${j}`}\n          style={{\n            width:20,\n            height:20,\n            backgroundColor: grid[i][j]?\"orange\":undefined,\n            border:\"solid 1px black\",\n            borderRadius:'2px'\n          }}\n          />\n        ))\n      )}\n    </div>\n    </>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,IAAI,MAAM,YAAY;AAC7B,OAAO,WAAW;AAClB,SAASC,QAAQ,QAAQ,OAAO;AAChC,SAASC,OAAO,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEhC,MAAMC,OAAO,GAAG,EAAE;AAClB,MAAMC,OAAO,GAAG,EAAE;AAClB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,IAAI,EAACC,OAAO,CAAC,GAAGX,QAAQ,CAAC,MAAI;IAClC,MAAMY,IAAI,GAAG,EAAE;IACf,KAAI,IAAIC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACP,OAAO,EAACO,CAAC,EAAE,EAAC;MACxBD,IAAI,CAACE,IAAI,CAACC,KAAK,CAACC,IAAI,CAACD,KAAK,CAACR,OAAO,CAAC,EAAC,MAAI,CAAC,CAAC,CAAC;IAC7C;IACA,OAAOK,IAAI;EACb,CAAC,CAAC;EACFK,OAAO,CAACC,GAAG,CAACR,IAAI,CAAC;EACjB,MAAM,CAACS,OAAO,EAACC,UAAU,CAAC,GAAGpB,QAAQ,CAAC,KAAK,CAAC;EAC5C,oBACEG,OAAA,CAAAE,SAAA;IAAAgB,QAAA,gBACAlB,OAAA;MAAAkB,QAAA,EAAQ;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACtBtB,OAAA;MAAKuB,KAAK,EAAE;QACVC,OAAO,EAAC,MAAM;QACdC,mBAAmB,EAAE,UAASrB,OAAQ;MACxC,CAAE;MAAAc,QAAA,EACCX,IAAI,CAACmB,GAAG,CAAC,CAACjB,IAAI,EAACC,CAAC,KACfD,IAAI,CAACiB,GAAG,CAAC,CAACC,IAAI,EAACC,CAAC,kBACd5B,OAAA;QACA6B,OAAO,EAAEA,CAAA,KAAI;UACX,MAAMC,OAAO,GAAGhC,OAAO,CAACS,IAAI,EAAEwB,QAAQ,IAAG;YACvCA,QAAQ,CAACrB,CAAC,CAAC,CAACkB,CAAC,CAAC,GAAGrB,IAAI,CAACG,CAAC,CAAC,CAACkB,CAAC,CAAC,GAAC,CAAC,GAAC,CAAC;UACjC,CAAC,CAAC;UACFpB,OAAO,CAACsB,OAAO,CAAC;QAClB,CAAE;QAEFP,KAAK,EAAE;UACLS,KAAK,EAAC,EAAE;UACRC,MAAM,EAAC,EAAE;UACTC,eAAe,EAAE3B,IAAI,CAACG,CAAC,CAAC,CAACkB,CAAC,CAAC,GAAC,QAAQ,GAACO,SAAS;UAC9CC,MAAM,EAAC,iBAAiB;UACxBC,YAAY,EAAC;QACf;MAAE,GAPI,GAAE3B,CAAE,IAAGkB,CAAE,EAAC;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAQf,CACF,CACH;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA,eACJ,CAAC;AAEP;AAAChB,EAAA,CAxCQD,GAAG;AAAAiC,EAAA,GAAHjC,GAAG;AA0CZ,eAAeA,GAAG;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}