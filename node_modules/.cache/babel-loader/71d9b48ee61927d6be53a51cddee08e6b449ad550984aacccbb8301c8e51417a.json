{"ast":null,"code":"var _jsxFileName = \"/home/milton/Desktop/Projects/conway-game-of-life/src/App.js\",\n  _s = $RefreshSig$();\nimport logo from './logo.svg';\nimport './App.css';\nimport { useCallback, useRef, useState } from 'react';\nimport { produce } from 'immer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst numRows = 50;\nconst numCols = 50;\nconst generateNewGrid = () => {\n  const rows = [];\n  for (let i = 0; i < numRows; i++) {\n    rows.push(Array.from(Array(numCols), () => 0));\n  }\n  return rows;\n};\nfunction App() {\n  _s();\n  const operations = [[0, 1], [0, -1], [1, -1], [-1, 1], [1, 1], [-1, -1], [1, 0], [-1, 0]];\n  //initializing grid\n  const [grid, setGrid] = useState(() => {\n    return generateNewGrid();\n  });\n  console.log(grid);\n\n  //runnging state check\n  const [running, setRunning] = useState(false);\n  const runningRef = useRef(running);\n  runningRef.current = running;\n\n  //using callback function for generating the function only once but the state of the grid will change and as will change the grid accordingly\n  const runSimulation = useCallback(() => {\n    if (!runningRef.current) return;\n    //simulate \n    setGrid(g => {\n      return produce(g, gridCopy => {\n        for (let i = 0; i < numRows; i++) {\n          for (let j = 0; j < numCols; j++) {\n            let neighbours = 0;\n            operations.forEach(([x, y]) => {\n              const newI = i + x;\n              const newJ = j + y;\n              if (newI >= 0 && newI < numRows && newJ >= 0 && newJ < numCols) neighbours += g[newI][newJ];\n            });\n            if (neighbours < 2 || neighbours > 3) gridCopy[i][j] = 0;else if (g[i][j] === 0 && neighbours === 3) gridCopy[i][j] = 1;\n          }\n        }\n      });\n    });\n    setTimeout(runSimulation, 1000);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      alignItems: 'center',\n      marginLeft: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setRunning(!running);\n        if (!running) {\n          runningRef.current = true;\n          runSimulation();\n        }\n      },\n      children: running ? \"Stop\" : \"Start\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setGrid(generateNewGrid());\n      },\n      children: \"clear\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        const rows = [];\n        for (let i = 0; i < numRows; i++) {\n          rows.push(Array.from(Array(numCols), () => Math.random() > 0.5 ? 1 : 0));\n        }\n        setGrid(rows);\n      },\n      children: \"random\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'grid',\n        gridTemplateColumns: `repeat(${numCols},20px)`\n      },\n      children: grid.map((rows, i) => rows.map((cols, j) => /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => {\n          const newGrid = produce(grid, gridCopy => {\n            gridCopy[i][j] = grid[i][j] ? 0 : 1;\n          });\n          setGrid(newGrid);\n        },\n        style: {\n          width: 20,\n          height: 20,\n          backgroundColor: grid[i][j] ? \"#5EFF00\" : undefined,\n          border: \"solid 1px black\",\n          borderRadius: '2px'\n        }\n      }, `${i}-${j}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }, this)))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"p376EPHtvdNr0G7OMulIY4OUvsk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["logo","useCallback","useRef","useState","produce","jsxDEV","_jsxDEV","numRows","numCols","generateNewGrid","rows","i","push","Array","from","App","_s","operations","grid","setGrid","console","log","running","setRunning","runningRef","current","runSimulation","g","gridCopy","j","neighbours","forEach","x","y","newI","newJ","setTimeout","style","alignItems","marginLeft","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","Math","random","display","gridTemplateColumns","map","cols","newGrid","width","height","backgroundColor","undefined","border","borderRadius","_c","$RefreshReg$"],"sources":["/home/milton/Desktop/Projects/conway-game-of-life/src/App.js"],"sourcesContent":["\nimport logo from './logo.svg';\nimport './App.css';\nimport { useCallback, useRef, useState } from 'react';\nimport { produce } from 'immer';\n\nconst numRows = 50;\nconst numCols = 50;\n\nconst generateNewGrid = () => {\n  const rows = [];\n  for (let i = 0; i < numRows; i++) {\n    rows.push(Array.from(Array(numCols), () => 0));\n  }\n  return rows;\n};\nfunction App() {\n  const operations = [\n    [0, 1],\n    [0, -1],\n    [1, -1],\n    [-1, 1],\n    [1, 1],\n    [-1, -1],\n    [1, 0],\n    [-1, 0]\n  ];\n  //initializing grid\n  const [grid, setGrid] = useState(() => {\n    return generateNewGrid();\n  });\n  console.log(grid);\n\n  //runnging state check\n  const [running, setRunning] = useState(false);\n  const runningRef = useRef(running);\n  runningRef.current = running;\n\n  //using callback function for generating the function only once but the state of the grid will change and as will change the grid accordingly\n  const runSimulation = useCallback(() => {\n    if (!runningRef.current) return;\n    //simulate \n    setGrid(g => {\n      return produce(g, gridCopy => {\n        for (let i = 0; i < numRows; i++) {\n          for (let j = 0; j < numCols; j++) {\n            let neighbours = 0;\n            operations.forEach(([x, y]) => {\n              const newI = i + x;\n              const newJ = j + y;\n              if (newI >= 0 && newI < numRows && newJ >= 0 && newJ < numCols) neighbours += g[newI][newJ];\n            })\n            if (neighbours < 2 || neighbours > 3) gridCopy[i][j] = 0;\n            else if (g[i][j] === 0 && neighbours === 3) gridCopy[i][j] = 1;\n          }\n        }\n      })\n    });\n    setTimeout(runSimulation, 1000);\n  }, []);\n  return (\n    <div style={{\n      alignItems:'center',\n      marginLeft:'20px'\n    }}>\n      <button onClick={() => {\n        setRunning(!running);\n        if (!running) {\n          runningRef.current = true;\n          runSimulation();\n        }\n      }}>\n        {running ? \"Stop\" : \"Start\"}\n      </button>\n\n      {/* clear matrix */}\n      <button onClick={() => {\n        setGrid(generateNewGrid());\n      }}>clear</button>\n      <button onClick={() => {\n        const rows = [];\n        for (let i = 0; i < numRows; i++) {\n          rows.push(Array.from(Array(numCols), () => Math.random() > 0.5 ? 1 : 0));\n        }\n        setGrid(rows);\n      }}>random</button>\n      <div style={{\n        display: 'grid',\n        gridTemplateColumns: `repeat(${numCols},20px)`\n      }}>\n        {grid.map((rows, i) =>\n          rows.map((cols, j) => (\n            <div\n              onClick={() => {\n                const newGrid = produce(grid, gridCopy => {\n                  gridCopy[i][j] = grid[i][j] ? 0 : 1;\n                });\n                setGrid(newGrid);\n              }}\n              key={`${i}-${j}`}\n              style={{\n                width: 20,\n                height: 20,\n                backgroundColor: grid[i][j] ? \"#5EFF00\" : undefined,\n                border: \"solid 1px black\",\n                borderRadius: '2px'\n              }}\n            />\n          ))\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}