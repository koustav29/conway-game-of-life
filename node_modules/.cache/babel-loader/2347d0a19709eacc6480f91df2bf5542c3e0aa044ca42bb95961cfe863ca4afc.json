{"ast":null,"code":"var _jsxFileName = \"/home/milton/Desktop/Projects/game-of-life/src/App.js\",\n  _s = $RefreshSig$();\nimport logo from './logo.svg';\nimport './App.css';\nimport { useCallback, useRef, useState } from 'react';\nimport { produce } from 'immer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst numRows = 10;\nconst numCols = 10;\nfunction App() {\n  _s();\n  const operations = [[0, 1], [0, -1], [1, -1], [-1, 1], [1, 1], [-1, -1], [1, 0], [-1, 0]];\n  //initializing grid\n  const [grid, setGrid] = useState(() => {\n    const rows = [];\n    for (let i = 0; i < numRows; i++) {\n      rows.push(Array.from(Array(numCols), () => 0));\n    }\n    return rows;\n  });\n  console.log(grid);\n\n  //runnging state check\n  const [running, setRunning] = useState(false);\n  const runningRef = useRef(running);\n  runningRef.current = running;\n\n  //using callback function for generating the function only once but the state of the grid will change and as will change the grid accordingly\n  const runSimulation = useCallback(() => {\n    if (!runningRef) return;\n    //simulate \n    setGrid(g => {\n      return produce(g, gridCopy => {\n        for (let i = 0; i < numRows; i++) {\n          for (let j = 0; j < numCols; j++) {\n            let neighbours = 0;\n            operations.forEach(([x, y]) => {\n              const newI = i + x;\n              const newJ = j + y;\n              if (newI >= 0 && newI < numRows && newJ >= 0 && newJ < numCols) neighbours += g[newI][newJ];\n            });\n            if (neighbours < 2 || neighbours > 3) gridCopy[i][j] = 0;else if (g[i][j] === 0 && neighbours === 3) gridCopy[i][j] = 1;\n          }\n        }\n      });\n    });\n    setTimeout(runSimulation, 1000);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setRunning(!running);\n        runningRef.current = true;\n        runSimulation();\n      },\n      children: running ? \"Stop\" : \"Start\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'grid',\n        gridTemplateColumns: `repeat(${numCols},20px)`\n      },\n      children: grid.map((rows, i) => rows.map((cols, j) => /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => {\n          const newGrid = produce(grid, gridCopy => {\n            gridCopy[i][j] = grid[i][j] ? 0 : 1;\n          });\n          setGrid(newGrid);\n        },\n        style: {\n          width: 20,\n          height: 20,\n          backgroundColor: grid[i][j] ? \"#5EFF00\" : undefined,\n          border: \"solid 1px black\",\n          borderRadius: '2px'\n        }\n      }, `${i}-${j}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }, this)))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"S119hHWhTjRJJ+HoqforoLFZChg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["logo","useCallback","useRef","useState","produce","jsxDEV","_jsxDEV","Fragment","_Fragment","numRows","numCols","App","_s","operations","grid","setGrid","rows","i","push","Array","from","console","log","running","setRunning","runningRef","current","runSimulation","g","gridCopy","j","neighbours","forEach","x","y","newI","newJ","setTimeout","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","style","display","gridTemplateColumns","map","cols","newGrid","width","height","backgroundColor","undefined","border","borderRadius","_c","$RefreshReg$"],"sources":["/home/milton/Desktop/Projects/game-of-life/src/App.js"],"sourcesContent":["\nimport logo from './logo.svg';\nimport './App.css';\nimport { useCallback, useRef, useState } from 'react';\nimport { produce } from 'immer';\n\nconst numRows = 10;\nconst numCols = 10;\nfunction App() {\n  const operations = [\n    [0,1],\n    [0,-1],\n    [1,-1],\n    [-1,1],\n    [1,1],\n    [-1,-1],\n    [1,0],\n    [-1,0]\n  ];\n  //initializing grid\n  const [grid, setGrid] = useState(() => {\n    const rows = [];\n    for (let i = 0; i < numRows; i++) {\n      rows.push(Array.from(Array(numCols), () => 0));\n    }\n    return rows;\n  });\n  console.log(grid);\n\n  //runnging state check\n  const [running, setRunning] = useState(false);\n  const runningRef = useRef(running);\n  runningRef.current = running;\n\n  //using callback function for generating the function only once but the state of the grid will change and as will change the grid accordingly\n  const runSimulation = useCallback(()=>{\n    if(!runningRef) return;\n    //simulate \n    setGrid(g=>{\n      return produce(g,gridCopy => {\n        for(let i=0;i<numRows;i++){\n          for(let j=0;j<numCols;j++){\n            let neighbours = 0;\n            operations.forEach(([x,y])=>{\n              const newI = i+x;\n              const newJ = j+y;\n              if(newI>=0 && newI<numRows && newJ>=0 && newJ<numCols) neighbours += g[newI][newJ];\n            })\n            if(neighbours< 2 ||neighbours>3) gridCopy[i][j]=0;\n            else if(g[i][j]===0 && neighbours===3) gridCopy[i][j]=1;\n          }\n        }\n      })\n    });\n    setTimeout(runSimulation,1000);\n  },[]);\n  return (\n    <>\n      <button onClick={()=>{\n        setRunning(!running);\n        runningRef.current=true;\n        runSimulation();\n      }}>\n        {running ? \"Stop\" : \"Start\"}\n      </button>\n      <div style={{\n        display: 'grid',\n        gridTemplateColumns: `repeat(${numCols},20px)`\n      }}>\n        {grid.map((rows, i) =>\n          rows.map((cols, j) => (\n            <div\n              onClick={() => {\n                const newGrid = produce(grid, gridCopy => {\n                  gridCopy[i][j] = grid[i][j] ? 0 : 1;\n                });\n                setGrid(newGrid);\n              }}\n              key={`${i}-${j}`}\n              style={{\n                width: 20,\n                height: 20,\n                backgroundColor: grid[i][j] ? \"#5EFF00\" : undefined,\n                border: \"solid 1px black\",\n                borderRadius: '2px'\n              }}\n            />\n          ))\n        )}\n      </div>\n    </>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}